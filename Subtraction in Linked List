//{ Driver Code Starts
import java.util.Scanner;

// Node Class
class Node {
    int data;
    Node next;

    Node(int val) {
        data = val;
        next = null;
    }
}

// Linked List Class
class LinkedList {
    Node head;
    Node tail;

    LinkedList() {
        head = null;
        tail = null;
    }

    // creates a new node with given value and appends it at the end of the linked list
    void insert(int val) {
        if (head == null) {
            head = new Node(val);
            tail = head;
        } else {
            tail.next = new Node(val);
            tail = tail.next;
        }
    }
}


public class Main {
    static void printList(Node n) 
    {
        while (n != null) {
            System.out.print(n.data);
            n = n.next;
        }
        System.out.println();
    }
    
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();

        for (int i = 0; i < t; ++i) {
            int n = sc.nextInt();
            LinkedList LL1 = new LinkedList();
            String l1 = sc.next();
            for (int j = 0; j < n; ++j) {
                int x = Character.getNumericValue(l1.charAt(j));
                LL1.insert(x);
            }

            int m = sc.nextInt();
            LinkedList LL2 = new LinkedList();
            String l2 = sc.next();
            for (int j = 0; j < m; ++j) {
                int x = Character.getNumericValue(l2.charAt(j));
                LL2.insert(x);
            }

            Solution ob = new Solution();
            Node res = ob.subLinkedList(LL1.head, LL2.head);
            printList(res);
        }
    }
}

// } Driver Code Ends


/*

Definition for singly Link List Node
class Node
{
    int data;
    Node next;

    Node(int x){
        data = x;
        next = null;
    }
}

You can also use the following for printing the link list.
Node.printList(Node node);
*/

class Solution {
    public Node reverse(Node head) {
        Node p = head, pre = null;
        
        while(p != null) {
            Node nxt = p.next;
            p.next = pre;
            
            pre = p;
            p = nxt;
        }
        
        return pre;
    }
    
    public int lengthOfLL(Node head) {
        int len = 0;
        Node p = head;
        
        while(p != null) {
            len++;
            p = p.next;
        }
        
        return len;
    }

    public Node subLinkedList(Node head1, Node head2) {
        while(head1 != null && head1.data == 0)
            head1 = head1.next;
            
        while(head2 != null && head2.data == 0)
            head2 = head2.next;
        
        int n1 = lengthOfLL(head1), n2 = lengthOfLL(head2);
        if(n2 > n1) {
            Node temp = head1;
            head1 = head2;
            head2 = temp;
        }
        
        if(n1 == n2) {
            Node t1 = head1, t2 = head2;
            while(t1 != null && t2 != null && t1.data == t2.data) {
                t1 = t1.next;
                t2 = t2.next;
            }
            
            if(t1 == null && t2 == null)
                return new Node(0);
            
            if(t1 != null && t2 != null && t2.data > t1.data) {
                Node temp = head1;
                head1 = head2;
                head2 = temp;
            }
        }
        
        head1 = reverse(head1);
        head2 = reverse(head2);
        
        Node t1 = head1, t2 = head2;
        Node dummy = new Node(0);
        Node p = dummy;
        
        while(t1 != null) {
            int less = 0;
            if(t2 != null)
                less = t2.data;
                
            if(t1.data < less) {
                if(t1.next != null)
                    t1.next.data -= 1;
                
                t1.data += 10;
            }
            
            p.next = new Node(t1.data - less);
            p = p.next;    
            t1 = t1.next;
             
            if(t2 != null) 
                t2 = t2.next;
        }
        
        dummy.next = reverse(dummy.next);
        p = dummy.next;
        
        while(p != null && p.next != null && p.data == 0)
            p = p.next;
        
        return p;
    }
}