//{ Driver Code Starts
//Initial Template for Java

import java.io.*;
import java.util.*;
class GfG
{
    public static void main(String args[])
        {
            Scanner sc = new Scanner(System.in);
            int t = sc.nextInt();
            while(t-->0)
                {
                    int n = sc.nextInt();
                    Solution ob = new Solution();
                    System.out.println(ob.padovanSequence(n));
                }
        }
}    
// } Driver Code Ends


//User function Template for Java

class Solution {
    int mod = 1000000007;

    public int padovanSequence(int n) {
        // Base cases: if n <= 2, return 1 (first three terms are 1)
        if (n <= 2) {
            return 1;
        }

        // Initialize the first three terms of the sequence
        int prev2 = 1, prev3 = 1, curr = 1;

        // Iterate from 3 to n to calculate the nth term
        for (int i = 3; i <= n; i++) {
            // Calculate the current term using the recurrence relation
            // P(n) = P(n-2) + P(n-3)
            int temp = curr;
            curr = (prev2 + prev3) % mod;

            // Update the values for the next iteration
            prev3 = prev2;
            prev2 = temp;
        }

        // Return the nth term
        return curr;
    }
}

